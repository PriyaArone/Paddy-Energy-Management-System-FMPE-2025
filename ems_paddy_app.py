# -*- coding: utf-8 -*-
"""EMS_Paddy_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yhW9Ve0PjdoaLkYdMQAAt0v4S1DDryzP
"""

# EMS Paddy App
# Developed for Google Colab / Streamlit Cloud deployment
!pip install streamlit

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

st.set_page_config(page_title="Paddy Energy Management System", layout="centered")
st.title("🌾 Energy Management System - Paddy")
st.markdown("---")

# ---------- User Input Section ----------
st.header("📋 User Information")
location = st.text_input("Location")
date = st.date_input("Date", value=datetime.today())
season = st.selectbox("Season", ["Kharif", "Rabi", "Summer"], index=0)

st.header("🔢 Input Data (per hectare)")
col1, col2 = st.columns(2)

with col1:
    human_labour = st.number_input("Human Labour (h)", min_value=0.0, step=1.0)
    machinery_use = st.number_input("Machinery Use (h)", min_value=0.0, step=1.0)
    diesel = st.number_input("Diesel Fuel (L)", min_value=0.0, step=1.0)
    nitrogen = st.number_input("Fertilizer - Nitrogen (kg)", min_value=0.0)
    phosphate = st.number_input("Fertilizer - Phosphate (kg)", min_value=0.0)
    potassium = st.number_input("Fertilizer - Potassium (kg)", min_value=0.0)
    zinc = st.number_input("Fertilizer - Zinc (kg)", min_value=0.0)

with col2:
    fym = st.number_input("Farmyard Manure (kg)", min_value=0.0)
    chemicals = st.number_input("Pesticides/Chemicals (kg)", min_value=0.0)
    irrigation = st.number_input("Water for Irrigation (m³)", min_value=0.0)
    electricity = st.number_input("Electricity (kWh)", min_value=0.0)
    seeds = st.number_input("Seeds (kg)", min_value=0.0)
    grain_output = st.number_input("Grain Yield (kg)", min_value=0.0)
    straw_output = st.number_input("Straw Yield (kg)", min_value=0.0)

if st.button("🔍 Analyze Energy"):
    st.markdown("---")
    st.subheader("📊 Energy Analysis Results")

    # Energy Equivalents (MJ/ha)
    energy_inputs = {
        "Human Labour": human_labour * 1.96,
        "Machinery Use": machinery_use * 62.7,
        "Diesel Fuel": diesel * 56.31,
        "Nitrogen": nitrogen * 66.14,
        "Phosphate": phosphate * 12.44,
        "Potassium": potassium * 11.15,
        "Zinc": zinc * 8.4,
        "FYM": fym * 0.3,
        "Chemicals": chemicals * 120,
        "Irrigation Water": irrigation * 1.02,
        "Electricity": electricity * 11.93,
        "Seeds": seeds * 3.6
    }

    energy_outputs = {
        "Grain": grain_output * 15.7,
        "Straw": straw_output * 12.5
    }

    total_input = sum(energy_inputs.values())
    total_output = sum(energy_outputs.values())
    eue = total_output / total_input if total_input else 0

    # Results Table
    st.markdown(f"**📍 Location:** {location} | **📅 Date:** {date.strftime('%d %b %Y')} | **Season:** {season}")
    st.metric("Total Energy Input (MJ/ha)", round(total_input, 2))
    st.metric("Total Energy Output (MJ/ha)", round(total_output, 2))
    st.metric("Energy Use Efficiency", round(eue, 2))

    # Charts
    st.subheader("📈 Input Energy Distribution")
    input_df = pd.DataFrame({"Input": energy_inputs.keys(), "Energy (MJ/ha)": energy_inputs.values()})
    fig1 = px.pie(input_df, names="Input", values="Energy (MJ/ha)", title="Input Energy Share")
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("📊 Input vs Output Energy")
    io_df = pd.DataFrame({
        "Type": ["Input", "Output"],
        "Energy (MJ/ha)": [total_input, total_output]
    })
    fig2 = px.bar(io_df, x="Type", y="Energy (MJ/ha)", color="Type", text_auto=True)
    st.plotly_chart(fig2, use_container_width=True)

    # Suggestions Section
    st.subheader("💡 Suggestions for Energy Optimization")
    if nitrogen * 66.14 / total_input > 0.4:
        st.warning("- Optimize Nitrogen usage with deep/side placement to reduce energy input.")
    if irrigation * 1.02 / total_input > 0.2:
        st.warning("- Improve irrigation efficiency by switching to intermittent or alternative systems.")
    if diesel * 56.31 / total_input > 0.2:
        st.warning("- Reduce machinery operation hours or adopt fuel-efficient engines.")
    if eue < 1:
        st.info("- Consider simplified and reduced-input practices to boost energy use efficiency.")

    st.markdown("---")
    st.markdown("### 🔑 Additional Recommendations")
    with st.expander("📌 Key Suggestions"):
        st.markdown("""
        - **Precision Fertilizer Management**: Deep placement increases nutrient uptake and reduces loss.
        - **Efficient Irrigation Systems**: Adopt drip or intermittent methods for energy savings.
        - **Mechanization**: Use optimal machine settings and avoid excess fuel consumption.
        - **Reduced-Input Practices**: Eliminate unnecessary inputs to reduce waste.
        - **Crop Diversification**: Rotate rice with legumes/oilseeds to improve long-term energy balance.
        - **Input Optimization**: Use DEA or benchmarking to find and apply efficient farming practices.
        - **Renewable Energy**: Shift toward solar-powered irrigation or organic fertilizers.
        - **Monitor Emissions**: Reduce diesel and fertilizer to minimize GHG emissions.
        """)

    st.success("✅ Analysis complete. You can modify inputs above to re-run.")

'''

'''

code = '''
# EMS Paddy App
# Developed for Google Colab / Streamlit Cloud deployment
!pip install streamlit

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

st.set_page_config(page_title="Paddy Energy Management System", layout="centered")
st.title("🌾 Energy Management System - Paddy")
st.markdown("---")

# ---------- User Input Section ----------
st.header("📋 User Information")
location = st.text_input("Location")
date = st.date_input("Date", value=datetime.today())
season = st.selectbox("Season", ["Kharif", "Rabi", "Summer"], index=0)

st.header("🔢 Input Data (per hectare)")
col1, col2 = st.columns(2)

with col1:
    human_labour = st.number_input("Human Labour (h)", min_value=0.0, step=1.0)
    machinery_use = st.number_input("Machinery Use (h)", min_value=0.0, step=1.0)
    diesel = st.number_input("Diesel Fuel (L)", min_value=0.0, step=1.0)
    nitrogen = st.number_input("Fertilizer - Nitrogen (kg)", min_value=0.0)
    phosphate = st.number_input("Fertilizer - Phosphate (kg)", min_value=0.0)
    potassium = st.number_input("Fertilizer - Potassium (kg)", min_value=0.0)
    zinc = st.number_input("Fertilizer - Zinc (kg)", min_value=0.0)

with col2:
    fym = st.number_input("Farmyard Manure (kg)", min_value=0.0)
    chemicals = st.number_input("Pesticides/Chemicals (kg)", min_value=0.0)
    irrigation = st.number_input("Water for Irrigation (m³)", min_value=0.0)
    electricity = st.number_input("Electricity (kWh)", min_value=0.0)
    seeds = st.number_input("Seeds (kg)", min_value=0.0)
    grain_output = st.number_input("Grain Yield (kg)", min_value=0.0)
    straw_output = st.number_input("Straw Yield (kg)", min_value=0.0)

if st.button("🔍 Analyze Energy"):
    st.markdown("---")
    st.subheader("📊 Energy Analysis Results")

    # Energy Equivalents (MJ/ha)
    energy_inputs = {
        "Human Labour": human_labour * 1.96,
        "Machinery Use": machinery_use * 62.7,
        "Diesel Fuel": diesel * 56.31,
        "Nitrogen": nitrogen * 66.14,
        "Phosphate": phosphate * 12.44,
        "Potassium": potassium * 11.15,
        "Zinc": zinc * 8.4,
        "FYM": fym * 0.3,
        "Chemicals": chemicals * 120,
        "Irrigation Water": irrigation * 1.02,
        "Electricity": electricity * 11.93,
        "Seeds": seeds * 3.6
    }

    energy_outputs = {
        "Grain": grain_output * 15.7,
        "Straw": straw_output * 12.5
    }

    total_input = sum(energy_inputs.values())
    total_output = sum(energy_outputs.values())
    eue = total_output / total_input if total_input else 0

    # Results Table
    st.markdown(f"**📍 Location:** {location} | **📅 Date:** {date.strftime('%d %b %Y')} | **Season:** {season}")
    st.metric("Total Energy Input (MJ/ha)", round(total_input, 2))
    st.metric("Total Energy Output (MJ/ha)", round(total_output, 2))
    st.metric("Energy Use Efficiency", round(eue, 2))

    # Charts
    st.subheader("📈 Input Energy Distribution")
    input_df = pd.DataFrame({"Input": energy_inputs.keys(), "Energy (MJ/ha)": energy_inputs.values()})
    fig1 = px.pie(input_df, names="Input", values="Energy (MJ/ha)", title="Input Energy Share")
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("📊 Input vs Output Energy")
    io_df = pd.DataFrame({
        "Type": ["Input", "Output"],
        "Energy (MJ/ha)": [total_input, total_output]
    })
    fig2 = px.bar(io_df, x="Type", y="Energy (MJ/ha)", color="Type", text_auto=True)
    st.plotly_chart(fig2, use_container_width=True)

    # Suggestions Section
    st.subheader("💡 Suggestions for Energy Optimization")
    if nitrogen * 66.14 / total_input > 0.4:
        st.warning("- Optimize Nitrogen usage with deep/side placement to reduce energy input.")
    if irrigation * 1.02 / total_input > 0.2:
        st.warning("- Improve irrigation efficiency by switching to intermittent or alternative systems.")
    if diesel * 56.31 / total_input > 0.2:
        st.warning("- Reduce machinery operation hours or adopt fuel-efficient engines.")
    if eue < 1:
        st.info("- Consider simplified and reduced-input practices to boost energy use efficiency.")

    st.markdown("---")
    st.markdown("### 🔑 Additional Recommendations")
    with st.expander("📌 Key Suggestions"):
        st.markdown("""
        - **Precision Fertilizer Management**: Deep placement increases nutrient uptake and reduces loss.
        - **Efficient Irrigation Systems**: Adopt drip or intermittent methods for energy savings.
        - **Mechanization**: Use optimal machine settings and avoid excess fuel consumption.
        - **Reduced-Input Practices**: Eliminate unnecessary inputs to reduce waste.
        - **Crop Diversification**: Rotate rice with legumes/oilseeds to improve long-term energy balance.
        - **Input Optimization**: Use DEA or benchmarking to find and apply efficient farming practices.
        - **Renewable Energy**: Shift toward solar-powered irrigation or organic fertilizers.
        - **Monitor Emissions**: Reduce diesel and fertilizer to minimize GHG emissions.
        """)

    st.success("✅ Analysis complete. You can modify inputs above to re-run.")
    '''
with open("EMS_Paddy_app.py", "w") as f:
    f.write(code)

print("✅ EMS_Paddy_app.py has been created. You can now upload it to GitHub.")